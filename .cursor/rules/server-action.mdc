---
description: 
globs: 
alwaysApply: true
---
- the server action files should be in the "actions" folder
- the server action files should be named "xxxxx.action.ts"
- the function inside should be named with Action at the end
- the server action shoudl always use the package next-safe-action
- there should not be any direct call to a model prisma ( use the fucntion in services instead )

# example of implementation of a server action with next-safe-action

auth.action.ts
```typecript
"use server"; // don't forget to add this!

import { z } from "zod";
import { actionClient } from "@/lib/safe-action";

// This schema is used to validate input from client.
const schema = z.object({
  username: z.string().min(3).max(10),
  password: z.string().min(8).max(100),
});

export const loginUserAction = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    if (username === "johndoe" && password === "123456") {
      const user : User = ...
      return user
    }

    throw new Error("failure)
  });
```

# how to call it in in the client side:
```typescript
type TypeResAction {
  data?: {success : boolean, message: string} 
  validationErrors ?: {
    _errors: ["A global error"],
    username: {
      _errors: ["Username format is invalid", "Username is too short"],
    },
    password: {
      _errors: ["Password must be at least 8 characters long"],
    },
  }
  bindArgsValidationErrors
  serverError?: {message: string}

}

const res : TypeResAction = await loginUser({
          username: "johndoe",
          password: "123456",
        });

        // Result keys.
        res?.data;
        res?.validationErrors;
        res?.bindArgsValidationErrors;
        res?.serverError;
```


to proctect an action or/and get the session:
```typescript
"use server";
 
import { auth } from "@/lib/auth";
import { headers } from "next/headers";
 
export const protectedAction = async () => {
    const session = await auth.api.getSession({
        headers: await headers(),
    });

    //the action logic
};

``` 















